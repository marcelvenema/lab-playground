---

#########################################################
## Pre-installation                                    ##
#########################################################

# Validate variables
- name: Validate variables for action.
  assert:
    that: "{{ item }} is defined"
    fail_msg: "Required variable '{{ item }}' has not been provided."
    quiet: true
  with_items: 
    - repository_url
    - semaphore_admin_username 
    - semaphore_admin_password
    - semaphore_admin_email 

#########################################################
## Pre-installation platform check                     ##
#########################################################

# Override platform check if platform variable is defined.
- name: Override platform check if platform variable is defined.
  set_fact:
    platform_check: false
  when: platform is defined

# Check if Podman is installed
- name: Check if Podman is installed
  command: podman --version
  register: podman_version_output
  ignore_errors: true
  when: platform_check is not defined

# Set platform if Podman is detected
- name: Set platform if Podman is detected
  set_fact:
    platform: "podman"
  when: 
    - platform_check is not defined
    - '"podman" in podman_version_output.stdout'

# Check if kubernetes is installed
# TODO

# If no podman or kubernetes is detected, use install on host
# TODO

#########################################################
## Pre-installation uninstall                          ##
#########################################################

# Check if Semaphore pod is present, if so remove it
- name: Check if Semaphore pod is present
  containers.podman.podman_container_info:
    name: semaphore
  register: semaphore_pod_info
  ignore_errors: true

# Run uninstall if Semaphore pod is present
- name: Run uninstall playbook if Semaphore pod is present
  include_tasks: uninstall.yml
  when: semaphore_pod_info is defined

#########################################################
## Pre-installation folders                            ##
#########################################################

# Create Semaphore config folder
- name: Create Semaphore config folder
  file:
    path: /data/semaphore/config
    state: directory

# Create Semaphore data folder
- name: Create Semaphore data folder
  file:
    path: /data/semaphore/data
    state: directory

#########################################################
## Pre-installation others                             ##
#########################################################

# Create encryption key
- name: Create encryption key
  shell: head -c32 /dev/urandom | base64
  register: encryption_key_output

#########################################################
## Installation via podman                             ##
#########################################################

- block:
 
  ##################################
  # Import container image         # 
  ##################################

  # Pull image from repository to local image repository. If failed, lookup local image file.
  - name: Pull Semaphore container image from repository
    containers.podman.podman_image:
      name: "{{ repository_url }}"
    register: pull_result
    ignore_errors: true

  # repository_url is a local container file, check if file exists
  - name: Check if repository_url is a local container file
    stat:
      path: "{{ repository_url }}"
    register: repository_url_result
    when: pull_result is failed

  # Fail if image file not found
  - name: Fail if Semaphore container image file not found
    fail:
      msg: "Repository URL {{ repository_url }} not found. Alternate container file location files/semaphore_*.tar not found. Cannot continue..."
    when: 
      - repository_url_result is failed
      - pull_result is failed

  # Copy image file to destination
  - name: Copy Semaphore container image file to destination
    copy:
      src: "{{ repository_url }}"
      dest: "/tmp/semaphore.tar"
    when: pull_result is failed

  # Load image from file if pull failed
  - name: Import Semaphore container image to podman
    shell: podman load -i /tmp/semaphore.tar
    register: import_result
    when: pull_result is failed

  # Check if import was successful
  - name: Fail if import was not successful
    fail:
      msg: "Import of Semaphore container image failed. ({{ repository_url }}) Cannot continue..."
    when: import_result.rc != 0

  # Get image info from podman
  - name: Gather info on Semaphore container image
    containers.podman.podman_image_info:
      name: semaphore
    register: image_info_result

  # Get Id from image info
  - name: Get Id from image info
    set_fact:
      image_id: "{{ image_info_result.images[0].Id[:12] }}"

  ##################################
  # Create Semaphore configuration #
  ##################################


  ##################################
  # Create Semaphore container     #
  ##################################

  # Create Semaphore pod
  - name: Create Semaphore pod
    containers.podman.podman_container:
      name: semaphore
      image: "{{ image_id }}"
      #pod: ansible
      volumes:
        - /data/semaphore/data:/opt/data/semaphore:Z
      restart_policy: unless-stopped
      env:
        SEMAPHORE_ADMIN_NAME: "{{ semaphore_admin_username }}"
        SEMAPHORE_ADMIN_PASSWORD: "{{ semaphore_admin_password }}"
        SEMAPHORE_ADMIN_EMAIL: "{{ semaphore_admin_email }}"
        SEMAPHORE_ADMIN: "{{ semaphore_admin_username }}"
        SEMAPHORE_DB_USER: semaphore
        SEMAPHORE_DB_PASS: semaphore
        SEMAPHORE_DB_HOST: mysql
        SEMAPHORE_DB_PORT: 3306
        SEMAPHORE_DB_DIALECT: mysql
        SEMAPHORE_DB: semaphore
        SEMAPHORE_PLAYBOOK_PATH: /tmp/semaphore
        SEMAPHORE_ACCESS_KEY_ENCRYPTION: "{{ encryption_key_output }}"

  when: platform == "podman"

#########################################################
## Installation via kubernetes                         ##
#########################################################

- block:

  # Debug message
  - name: Debug message
    debug:
      msg: "Install Semaphore via kubernetes"
  
  # Show information message
  - name: This part is not (yet) implemented.
    debug:
      msg: "This part is not (yet) implemented."

  # Stop playbook
  - name: Stop playbook
    meta: end_play

  when: platform == "kubernetes"

#########################################################
## Installation on host                                ##
#########################################################

- block:

  # Debug message
  - name: Debug message
    debug:
      msg: "Install Semaphore on host"
  
  # Show information message
  - name: This part is not (yet) implemented.
    debug:
      msg: "This part is not (yet) implemented."

  # Stop playbook
  - name: Stop playbook
    meta: end_play

  when: platform == "host"

# Create Ansible pod from commandline
#- name: Create Ansible pod
#  shell: podman pod create --name ansible -p 3000:3000 -p 3306:3306

# Create MySQL pod
#- name: Create MySQL pod
#  containers.podman.podman_container:
#    name: mysql
#    image: docker.io/mysql/mysql-server:latest
#    pod: ansible
#    volumes:
#      - /data/semaphore/data:/var/lib/mysql:Z
#    restart_policy: unless-stopped
#    env:
#      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
#      MYSQL_DATABASE: semaphore
#      MYSQL_USER: semaphore
#      MYSQL_PASSWORD: semaphore
 




#########################################################
## Configuration                                       ##
#########################################################

# Configure Semaphore
- name: Configure
  include_tasks: configure.yml