---

#########################################################
## Pre-installation                                    ##
#########################################################

# Validate variables
- name: Validate variables for action.
  assert:
    that: "{{ item }} is defined"
    fail_msg: "Required variable '{{ item }}' has not been provided."
    quiet: true
  with_items: 
    - repository_url

#########################################################
## Pre-installation platform check                     ##
#########################################################

# Override platform check if platform variable is defined.
- name: Override platform check if platform variable is defined.
  set_fact:
    platform_check: false
  when: platform is defined

# Check if Podman is installed
- name: Check if Podman is installed
  command: podman --version
  register: podman_version_output
  ignore_errors: true
  when: platform_check is not defined

# Set platform if Podman is detected
- name: Set platform if Podman is detected
  set_fact:
    platform: "podman"
  when: 
    - platform_check is not defined
    - '"podman" in podman_version_output.stdout'

# Check if kubernetes is installed
# TODO

# If no podman or kubernetes is detected, use install on host
# TODO

#########################################################
## Pre-installation uninstall                          ##
#########################################################

# Check if Gogs pod is present, if so remove it
- name: Check if Gogs pod is present
  containers.podman.podman_container_info:
    name: gogs
  register: gogs_pod_info
  ignore_errors: true

# Run uninstall if Gogs pod is present
- name: Run uninstall if Gogs pod is present
  include_tasks: uninstall.yml
  when: gogs_pod_info is defined

#########################################################
## Pre-installation folders                            ##
#########################################################

# Create Gogs folder
- name: Create Gogs config folder
  file:
    path: /data/gogs
    state: directory

#########################################################
## Installation                                        ##
#########################################################

#########################################################
## Installation via podman                             ##
#########################################################

- block:

  ##################################
  # Import container image         # 
  ##################################

  # Pull image from repository to local image repository. If failed, lookup local image file.
  - name: Pull Gogs container image from repository
    containers.podman.podman_image:
      name: "{{ repository_url }}"
    register: pull_result
    ignore_errors: true

  # repository_url is a local container file, check if file exists
  - name: Check if repository_url is a local container file
    stat:
      path: "{{ repository_url }}"
    register: repository_url_result
    delegate_to: localhost
    when: pull_result is failed

  # Fail if image file not found
  - name: Fail if Gogs container image file not found
    fail:
      msg: "Repository URL {{ repository_url }} not found. Container image file location not found. Cannot continue..."
    when: 
      - pull_result is failed
      - repository_url_result.stat.exists is not defined

  # Copy image file to destination
  - name: Copy Gogs container image file to destination
    copy:
      src: "{{ repository_url }}"
      dest: "/tmp/gogs.tar"
    when: pull_result is failed

  # Load image from file if pull failed
  - name: Import Gogs container image to podman
    shell: podman load -i /tmp/gogs.tar
    register: import_result
    when: pull_result is failed

  # Get image info from podman
  - name: Gather info on Gogs container image
    containers.podman.podman_image_info:
      name: gogs
    register: image_info_result

  # Get Id from image info
  - name: Get Id from image info
    set_fact:
      image_id: "{{ image_info_result.images[0].Id[:12] }}"

  # Cleanup image file
  - name: Cleanup container image file
    file:
      path: /tmp/gogs.tar
      state: absent
    when: pull_result is failed

  ##################################
  # Create Gogs container          #
  ##################################

  # Create Gogs pod
  - name: Create Gogs git pod
    containers.podman.podman_container:
      name: gogs
      image: "{{ image_id }}"
      ports:
        - 10022:0022
        - 10880:3000
      volumes:
        - /data/gogs:/data:Z
      restart_policy: always
      state: started

  # Auto-start Gogs pod on boot
  - name: Generate systemd unit file for Gogs pod
    containers.podman.podman_generate_systemd:
      name: gogs
      new: true
      no_header: true
      dest: /etc/systemd/system

  when: platform == "podman"

#########################################################
## Installation via kubernetes                         ##
#########################################################

- block:

  # Debug message
  - name: Debug message
    debug:
      msg: "Install Gogs via kubernetes"
  
  # Show information message
  - name: This part is not (yet) implemented.
    debug:
      msg: "This part is not (yet) implemented."

  # Stop playbook
  - name: Stop playbook
    meta: end_play

  when: platform == "kubernetes"

#########################################################
## Installation on host                                ##
#########################################################

- block:

  # Debug message
  - name: Debug message
    debug:
      msg: "Install Gogs on host"
  
  # Show information message
  - name: This part is not (yet) implemented.
    debug:
      msg: "This part is not (yet) implemented."

  # Stop playbook
  - name: Stop playbook
    meta: end_play

  when: platform == "host"

