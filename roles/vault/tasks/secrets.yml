---

#########################################################
## Hashicorp Vault Secrets module                      ##
#########################################################

# Validate global variables for Hashicorp Vault secrets module.
- name: Validate global variables for Hashicorp Vault secrets module.
  ansible.builtin.assert:
    that: "{{ varitem }} is defined"
    fail_msg: "Required variable '{{ varitem }}' has not been provided."
    quiet: true
  loop_control:
    loop_var: varitem
  loop: 
    - vault_address
    - vault_token

#########################################################
## Get Secret                                          ##
#########################################################

- name: Get Vault secret
  when: action == "get_secret"
  block:

    # Register var_result variable
    - name: Register var_result variable
      ansible.builtin.set_fact:
        var_result: "{{ var_result }}"
      no_log: true
      when: var_result is not defined

    # Clear variable var_result, be sure it is not used from a previous run.
    - name: Clear variable var_result
      ansible.builtin.set_fact:
        var_result: ""
      no_log: true

    # Validate local variables
    - name: Validate variables for Vault get_secret action.
      ansible.builtin.assert:
        that: "{{ varitem }} is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop: 
        - vault_name
        - secret_name
        - secret_key
        - var_result

    # Get secret via Vault API.
    - name: "Get secret {{ secret_name }} via API"
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/{{ vault_name }}/data/{{ secret_name }}"
        validate_certs: false 
        method: GET
        headers:
          X-Vault-Token: "{{ vault_token }}"
      register: secret_result

    # Get secret_key value from result and parse into variable from var_result
    - name: Parse secret_key result
      ansible.builtin.set_fact:
        "{{ var_result }}" : "{{ secret_result.json.data.data[secret_key] }}"
      no_log: true

    # TODO error handling

#########################################################
## Create Secret                                       ##
#########################################################

- name: Create Vault secret
  when: action == "create_secret"
  block:

    # Validate local variables
    - name: Validate variables for Vault create_secret action.
      ansible.builtin.assert:
        that: "{{ varitem }} is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop: 
        - vault_name
        - secret_name

    # Create secret via API. Authenticate with vault_token.
    - name: "Create secret {{ secret_name }} via API"
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/{{ vault_name }}/data/{{ secret_name }}"
        validate_certs: false 
        method: POST
        headers:
          X-Vault-Token: "{{ vault_token }}"
        body_format: json
        body: 
          data: "{{ secret_keyvalue }}"
      register: vault_secret
      no_log: true
 
#########################################################
## Destroy Secret                                      ##
#########################################################

- name: Destroy Vault secret
  when: action == "destroy_secret"
  block:
  
    # Validate local variables
    - name: Validate variables for Vault destroy_secret action.
      ansible.builtin.assert:
        that: "{{ varitem }} is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop: 
        - vault_name
        - secret_name

    # TODO


#########################################################
## Import Secrets                                      ##
#########################################################

- name: Import Vault secrets
  when: action == "import_secrets"
  block:
  
   # Register var_result variable
    - name: Register var_result variable
      ansible.builtin.set_fact:
        var_result: "ostf_export_secrets"
      #no_log: true
      when: var_result is not defined

    # Clear variable var_result, be sure it is not used from a previous run.
    - name: Clear variable var_result
      ansible.builtin.set_fact:
        var_result: ""
      no_log: true

    # Validate local variables
    - name: Validate variables for Vault export_secrets action.
      ansible.builtin.assert:
        that: "{{ varitem }} is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop: 
        - vault_name
        - filename

    # Read secret from file
    - name: Read secrets from file
      ansible.builtin.slurp:
        src: "{{ filename }}"
      register: secret_file_import
      no_log: true

    # Parse secrets
    - name: Parse secrets
      ansible.builtin.set_fact:
        secret_import: "{{ secret_file_import.content | b64decode }}"
      no_log: true

    # Parse secrets
    - name: Parse secrets
      ansible.builtin.set_fact:
        secret_name: "{{ secret_import.secret_name }}"
      no_log: true  

    # Debug message
    - name: Debug message
      ansible.builtin.debug:
        msg: "{{ secret_name }}"



#########################################################
## Export Secrets                                      ##
#########################################################

- name: Export Vault secrets
  when: action == "export_secrets"
  block:
    
   # Register var_result variable
    - name: Register var_result variable
      ansible.builtin.set_fact:
        var_result: "ostf_export_secrets"
      #no_log: true
      when: var_result is not defined

    # Clear variable var_result, be sure it is not used from a previous run.
    - name: Clear variable var_result
      ansible.builtin.set_fact:
        var_result: ""
      no_log: true

    # Validate local variables
    - name: Validate variables for Vault export_secrets action.
      ansible.builtin.assert:
        that: "{{ varitem }} is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop: 
        - vault_name
        - secret_name
        - filename

    # Get secret via Vault API.
    - name: Get secret via API
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/{{ vault_name }}/data/{{ secret_name }}"
        validate_certs: false 
        method: GET
        headers:
          X-Vault-Token: "{{ vault_token }}"
      register: secret_result
      no_log: true
    
    # Parse secret_result JSON
    - name: Parse secret results...
      ansible.builtin.set_fact:
        secret_export: "{{ { 'secret_name': '{{ secret_name }}', 'filename': '{{ filename }}', 'timestamp': '{{ ansible_date_time.iso8601 }}', 'user': '{{ ansible_user_id }}' } | combine( { 'data' : '{{ secret_result.json.data.data }}'  } )  }}"

    # Write secret to file
    - name: Write secret to file
      ansible.builtin.copy:
        content: "{{ secret_export | to_nice_json }}"
        dest: "{{ filename }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: 0600
  